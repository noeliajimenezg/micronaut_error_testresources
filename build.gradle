plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.4.0"
    id("io.micronaut.test-resources") version "4.4.0"
}

version = "0.1"
group = "com.example"

repositories {
    mavenCentral()
}

configurations.configureEach {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'io.micronaut.testresources') {
            details.useVersion "2.5.3"
        }
    }
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    compileOnly("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")
    testImplementation("io.micronaut:micronaut-http-client")
    testImplementation("io.micronaut.testresources:micronaut-test-resources-extensions-core")
    testImplementation("io.micronaut.testresources:micronaut-test-resources-extensions-junit-platform")


//  jdbc dependencies: in our case the real connection is made by a custom jdbc library
//  micronaut-data-jdbc triggers the addition of jdbc-oracle-free, only in runtimeOnly
//    runtimeOnly 'io.micronaut.data:micronaut-data-jdbc:4.8.3'
    testRuntimeOnly('io.micronaut.sql:micronaut-jdbc-hikari')
    testRuntimeOnly("com.oracle.database.jdbc:ojdbc11")
    testRuntimeOnly("org.flywaydb:flyway-database-oracle")
    testImplementation("io.micronaut.flyway:micronaut-flyway")
}


application {
    mainClass.set("com.example.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("21")
    targetCompatibility = JavaVersion.toVersion("21")
}


graalvmNative.toolchainDetection = false
def testResourcesEnabled = providers.gradleProperty("micronaut.testResources").map(Boolean::parseBoolean).orElse(false)
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
    testResources {
        version = "2.5.3"
        enabled = testResourcesEnabled
        clientTimeout = 500 //to avoid timeouts first time pulling oracle image
        additionalModules.add('jdbc-oracle-free') //this triggers the database if micronaut-data is in runtime classpath not test runtime classpath
    }
}

test {
    systemProperty 'micronaut.env.deduction', 'false'
    if (testResourcesEnabled.get()){
        systemProperty 'micronaut.environments', 'test'
    }
    systemProperty 'micronaut.test.resources.enabled', testResourcesEnabled.get()
    useJUnitPlatform()
}

tasks.named("dockerfile") {
    baseImage("eclipse-temurin:21-jre-jammy")
}

tasks.named("dockerfileNative") {
    jdkVersion = "21"
}
